<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initializing Test Scenario
colors = obj_master_UI.colors;

bgPanel = instance_create(10, 10, obj_UI_panel);
bgPanel.bgColor = colors.lightBlue;
bgPanel.borderWidth = 4;
bgPanel.width = 620;
bgPanel.height = 340;
bgPanel.depth = 0;

testLabel = instance_create(bgPanel.x + 8, bgPanel.y + 8, obj_UI_label);
testLabel.depth = -1;
testLabel.bgAlpha = 0.4;
testLabel.borderAlpha=1;
testLabel.borderColor = colors.red;
testLabel.textColor = colors.red;

testLabel2 = instance_create(testLabel.x + testLabel.width + 4, testLabel.y, obj_UI_label);
testLabel2.depth = -1;
testLabel2.bgColor = colors.green;
testLabel2.bgAlpha = 0.4;
testLabel2.text = "TestLabel2";
testLabel2.autosize = true;
testLabel2.font = fnt_UI_test;

testLabel3 = instance_create(testLabel.x, testLabel2.y + testLabel2.height + 5, obj_UI_label);
testLabel3.depth = -1;
testLabel3.text = "A label with a smaller font";
testLabel3.autosize = true;
testLabel3.font = fnt_UI_test_small;
testLabel3.textColor = colors.red;
ds_list_add(testLabel3.mouseEnterEvents, scr_event_highlightText);
ds_list_add(testLabel3.mouseLeaveEvents, scr_event_returnNormalTextColor);

testButton = instance_create(testLabel.x, testLabel3.y + testLabel3.height + 10, obj_UI_button);
testButton.depth = -1;
testButton.text = "TestButton";
ds_list_add(testButton.clickEvents, scr_event_showTestMessage);

testButton2 = instance_create(testButton.x + testButton.width + 5, testButton.y, obj_UI_button);
testButton2.depth = -1;
testButton2.text = "TestButton2 - Very Cool";
testButton2.bgColor = colors.purple;
testButton2.bgAlpha = 0.5;
testButton2.autosize = true;
ds_list_add(testButton2.clickEvents, scr_event_showTestMessage);
ds_list_add(testButton2.mouseEnterEvents, scr_event_setWhiteBorderAndText);
ds_list_delete(testButton2.mouseEnterEvents, ds_list_find_index(testButton2.mouseEnterEvents, scr_event_highlightText));
ds_list_delete(testButton2.mouseEnterEvents, ds_list_find_index(testButton2.mouseEnterEvents, scr_event_highlightBorder));

testCheckBox = instance_create(testButton.x, testButton2.y + testButton2.height + 10, obj_UI_checkbox);
testCheckBox.depth = -1;
testCheckBox.text = "TestCheckBox";
testCheckBox.autosize = true;
testCheckBox.borderWidth = 2;
testCheckBox.bgColor = colors.pink;
testCheckBox.bgAlpha = 0.75;
ds_list_add(testCheckBox.clickEvents, scr_event_updateStateLabel);

stateLabel = instance_create(testCheckBox.x + testCheckBox.width + 5, testCheckBox.y, obj_UI_label);
stateLabel.depth = -1;
stateLabel.text = string(testCheckBox.checked);

testSlider = instance_create(testCheckBox.x, testCheckBox.y + testCheckBox.height + 10, obj_UI_slider);
testSlider.depth = -1;
testSlider.blockColor = obj_UI_colors.green;
testSlider.barColor = obj_UI_colors.blue;
ds_list_add(testSlider.dragEvents, scr_event_updateValueLabel);

valueLabel = instance_create(testSlider.x + testSlider.width + 5, testSlider.y, obj_UI_label);
valueLabel.depth = -1;
valueLabel.text = string(testSlider.value);

alarm[1] = 2;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Positioning elements
bgPanel.x = 10;
bgPanel.y = 10;

testLabel.x = bgPanel.x + 8;
testLabel.y = bgPanel.y + 8;

testLabel2.x = testLabel.x + testLabel.width + 4;
testLabel2.y = testLabel.y;

testLabel3.x = testLabel.x;
testLabel3.y = testLabel2.y + testLabel2.height + 5;

testButton.x = testLabel.x;
testButton.y = testLabel3.y + testLabel3.height + 10;

testButton2.x = testButton.x + testButton.width + 5;
testButton2.y = testButton.y;

testCheckBox.x = testButton.x;
testCheckBox.y = testButton2.y + testButton2.height + 10;

stateLabel.height = testCheckBox.height;
stateLabel.x = testCheckBox.x + testCheckBox.width + 5;
stateLabel.y = testCheckBox.y;

testSlider.x = testCheckBox.x;
testSlider.y = testCheckBox.y + testCheckBox.height + 10;

var heightDifference = valueLabel.height - testSlider.height;
valueLabel.x = testSlider.x + testSlider.width + 5;
valueLabel.y = testSlider.y - heightDifference/2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_center();
with(obj_master_UI)
{
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test Input
if(keyboard_check_pressed(ord("F")))
{
    if(window_get_width() == 1280) window_set_size(960, 540);
    else window_set_size(1280, 720);
    
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
