<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_UI_label</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parent Event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Base Properties

//Display
bgAlpha = 1;
borderAlpha = 1;

//Size
width = 150;

//Keyboard Cursor
cursorWidth = 1;
cursorHeight = 11;
cursorColor = obj_UI_colors.black;
cursorAlpha = 1;
showCursor = false;

cursorTimerMax = 0.55;
cursorTimer = cursorTimerMax;
oscillateCursor = false;

//Keyboard Input
deleteTimer = 0;
deleteTimerMax = 4;

//Text Display
fullText = text;
displayIndex = 0;
indexTimer = 0;
indexTimerMax = 1.8;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Event Setup
ds_list_add(clickEvents, scr_event_showKeyboardCursor);

ds_list_add(mouseEnterEvents, scr_event_highlightBorder);
ds_list_add(mouseEnterEvents, scr_event_highlightText);
ds_list_add(mouseLeaveEvents, scr_event_returnNormalBorder);
ds_list_add(mouseLeaveEvents, scr_event_returnNormalTextColor);

clickOutsideEvents = ds_list_create();
ds_list_add(clickOutsideEvents, scr_event_hideKeyboardCursor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parent Event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Oscillating Cursor
if(oscillateCursor &amp;&amp; keyboard_check(vk_anykey))
{
    showCursor = true;
    cursorTimer = cursorTimerMax;
}
else
{
    if(oscillateCursor)
    {
        cursorTimer -= 1*obj_deltatime.delta;
        if(cursorTimer &lt;= 0)
        {
            cursorTimer = cursorTimerMax;
            showCursor = !showCursor;
        }
    }
    else if(showCursor)
    {
        showCursor = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Event Invokations
var scale = obj_master_UI.scale;
var X = x*scale;
var Y = y*scale;
var scaledHeight = height * scale;
var scaledWidth = width * scale;


//Click Outside
if(!point_in_rectangle(mouseX, mouseY, X, Y, X + scaledWidth, Y + scaledHeight) &amp;&amp; mouse_check_button_pressed(mb_left))
{
    scr_invoke_events(id, clickOutsideEvents);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Processing Keyboard Input
if(oscillateCursor)
{
    var overflow = scr_get_string_overflow(fullText, font, width - 20);
    if(keyboard_check(vk_anykey))
    {
        overflow = scr_get_string_overflow(fullText, font, width - 20);
        if(keyboard_lastkey != vk_left &amp;&amp; keyboard_lastkey != vk_right)
        {
            displayIndex = overflow;
        }

        fullText += string(keyboard_string);
        keyboard_string = "";
    }
    
    if(keyboard_check(vk_backspace) &amp;&amp; !keyboard_check_pressed(vk_backspace) &amp;&amp; deleteTimer &gt;= deleteTimerMax)
    {
        overflow = scr_get_string_overflow(fullText, font, width - 20);
        displayIndex = overflow;
        
        fullText = string_delete(fullText, string_length(fullText), 1);
        deleteTimer = 0;
        keyboard_string = "";
    }
    
    if(keyboard_check_pressed(vk_backspace))
    {
        fullText = string_delete(fullText, string_length(fullText), 1);
        deleteTimer = -17.5;
        keyboard_string = "";
    }
    
    //DisplayIndex
    overflow = scr_get_string_overflow(fullText, font, width - 20);
    if(keyboard_check(vk_left) &amp;&amp; indexTimer &gt;= indexTimerMax)
    {
        indexTimer = 0;
        displayIndex = clamp(displayIndex-1, 0, overflow);
    }
    if(keyboard_check(vk_right) &amp;&amp; indexTimer &gt;= indexTimerMax)
    {
        indexTimer = 0;
        displayIndex = clamp(displayIndex+1, 0, overflow);
    }
}

//Updating Delete Timer
if(deleteTimer &lt; deleteTimerMax)
{
    deleteTimer += obj_deltatime.delta * 70;
}

//Updating Index Change Timer
if(indexTimer &lt; indexTimerMax)
{
    indexTimer += obj_deltatime.delta * 70;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Updating Displayed Text
text = string_delete(fullText, 1, displayIndex);
text = scr_string_trim(text, font, width-18);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parent Event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor
if(showCursor)
{
    var scale = obj_master_UI.scale;
    var X = x*scale;
    var Y = y*scale;
    var scaledHeight = height * scale;
    var scaledWidth = width * scale;
    var scaledCursorHeight = cursorHeight*scale;
    var scaledCursorWidth = cursorWidth*scale;
    var scaledBorderWidth = borderWidth*scale;
    var scaledStringWidth = string_width(text);
    var scaledTextOffset = 6 * scale;
    
    draw_set_alpha(cursorAlpha);
    draw_set_color(cursorColor);
    
    var overflow = scr_get_string_overflow(fullText, font, width - 20);
    var cursorX = clamp(X + scaledStringWidth + scaledTextOffset + scaledBorderWidth, X, X+scaledWidth - scaledBorderWidth);
    if(overflow &gt; 1) cursorX = X + scaledWidth - 8*scale;
    
    var cursorY = Y + scaledHeight/2 - scaledCursorHeight/2;
    
    draw_rectangle(cursorX, cursorY, cursorX + scaledCursorWidth, cursorY + scaledCursorHeight, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
